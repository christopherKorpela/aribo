<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<node name="vcpp" type="vcpp" pkg="aribo">
		<remap from="/vcpp/cloud_in" to="/point_map" />
	</node>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		
		<!-- remove floor >
		<param name="filter_ground" value="true" /-->
		<param name="base_frame_id" type="string" value="base_link" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="/cloud_in" to="/vcpp/cloud_out" />
		<remap from="/tf_static" to="/tf" />

		<remap from="/projected_map" to="/slow_map" />
	</node>
	<node name="mapRepeater" type="mapRepeater.py" pkg="aribo">
		<remap from="/fast_map" to="/map" />
	</node>
</launch>
